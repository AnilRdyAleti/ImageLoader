// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package me.anil.imageloader.daggermodules;

import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MembersInjectors;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import me.anil.imageloader.modules.detail.DetailActivity;
import me.anil.imageloader.modules.homescreen.HomeScreenActivity;
import me.anil.imageloader.modules.homescreen.HomeScreenActivity_MembersInjector;
import me.anil.imageloader.modules.homescreen.HomeScreenPresenter;
import me.anil.imageloader.network.RestClient;

public final class DaggerObjectGraph implements ObjectGraph {
  private Provider<RestClient> provideRestClientProvider;

  private Provider<HomeScreenPresenter> provideHomeScreenPresenterProvider;

  private MembersInjector<HomeScreenActivity> homeScreenActivityMembersInjector;

  private DaggerObjectGraph(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static ObjectGraph create() {
    return builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideRestClientProvider =
        DoubleCheck.provider(
            PresenterModule_ProvideRestClientFactory.create(builder.presenterModule));

    this.provideHomeScreenPresenterProvider =
        DoubleCheck.provider(
            PresenterModule_ProvideHomeScreenPresenterFactory.create(
                builder.presenterModule, provideRestClientProvider));

    this.homeScreenActivityMembersInjector =
        HomeScreenActivity_MembersInjector.create(provideHomeScreenPresenterProvider);
  }

  @Override
  public void inject(HomeScreenActivity homeScreenActivity) {
    homeScreenActivityMembersInjector.injectMembers(homeScreenActivity);
  }

  @Override
  public void inject(DetailActivity detailActivity) {
    MembersInjectors.<DetailActivity>noOp().injectMembers(detailActivity);
  }

  public static final class Builder {
    private PresenterModule presenterModule;

    private Builder() {}

    public ObjectGraph build() {
      if (presenterModule == null) {
        this.presenterModule = new PresenterModule();
      }
      return new DaggerObjectGraph(this);
    }

    public Builder presenterModule(PresenterModule presenterModule) {
      this.presenterModule = Preconditions.checkNotNull(presenterModule);
      return this;
    }
  }
}
